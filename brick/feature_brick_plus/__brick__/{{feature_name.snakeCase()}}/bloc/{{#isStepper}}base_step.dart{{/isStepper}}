enum {{feature_name.pascalCase()}}Step {

  {{#childrenNames}}{{#camelCase}}{{.}}{{/camelCase}}('{{#camelCase}}{{.}}{{/camelCase}}'),
  {{/childrenNames}}

  const {{feature_name.pascalCase()}}Step(this.value);

  final String value;

  final Map<String, {{feature_name.pascalCase()}}Step> _byValue = {};

  {{feature_name.pascalCase()}}Step getByValue(String value) {
    if (_byValue.isEmpty) {
      for (final status in {{feature_name.pascalCase()}}Step.values) {
        _byValue[status.value] = status;
      }
    }

    return _byValue[value] ?? {{feature_name.pascalCase()}}Step.planSelection;
  }
}

extension {{feature_name.pascalCase()}}StepX on {{feature_name.pascalCase()}}Step {
  {{#childrenNames}}bool get is{{#pascalCase}}{{.}}{{/pascalCase}} => this == {{feature_name.pascalCase()}}Step.{{#camelCase}}{{.}}{{/camelCase}};
  {{/childrenNames}}

  {{feature_name.pascalCase()}}Step? get nextStep {
    {{#childrenNames}}if (is{{#pascalCase}}{{.}}{{/pascalCase}}) return {{feature_name.pascalCase()}}Step.{{#camelCase}}{{.}}{{/camelCase}};
    {{/childrenNames}}
    return null;
  }

  {{feature_name.pascalCase()}}Step? get previousStep {
    // TODO: Implement previousStep
    return null;
  }

  int? get page {
    {{#childrenNames}}if (is{{#pascalCase}}{{.}}{{/pascalCase}}) return; //TODO: add index number
    {{/childrenNames}}

    return null;
  }
}
